====================================================
Install SDK & Development for Python
====================================================

.. container::
   :name: page

   .. container:: aui-page-panel
      :name: main

      .. container::
         :name: main-header

         .. container::
            :name: breadcrumb-section

            #. `Eden Platform <index.html>`__
            #. `EdenChain Doc <EdenChain-Doc_120848728.html>`__
            #. `SDK_Docs <SDK_Docs_124813380.html>`__
            #. `Python <Python_122848141.html>`__

         .. rubric:: Install SDK & Development for
            Python
            :name: title-heading
            :class: pagetitle

      .. container:: view
         :name: content

         .. container:: page-metadata

            Created by Jacki Heo, last modified by Hailee Kim on Mar 27,
            2019

         .. container:: wiki-content group
            :name: main-content

            #. .. rubric:: Development Environment
                  :name: InstallSDK&DevelopmentforPython-DevelopmentEnvironment

            Linux/Windows/Mac OS 

            It was developed only for python3.

            | 

            .. rubric:: 2. Installation
               :name: InstallSDK&DevelopmentforPython-2.Installation

            In the project directory, do the following.

            | 

            ::

               pip install  eden_client_api

            | 
            | If there is no error, installation to the relevant library
              is completed.

            .. rubric:: 3. Provided API
               :name: InstallSDK&DevelopmentforPython-3.ProvidedAPI

            All of the following APIs are methods of the EdenClientApi
            () class.

            | 

            -  .. rubric:: Network Settings
                  :name: InstallSDK&DevelopmentforPython-NetworkSettings

            Set up the network of the Edenchain to connect through the
            SDK. There are currently three networks, and you have to set
            up a network to test, which is always the first thing you
            need to initialize when using the SDK.

            | 

            .. rubric:: (1)  Network constant
               :name: InstallSDK&DevelopmentforPython-(1)Networkconstant

            ::

               EDEN_MAINNET_NETWORK      : EdenChain MainNet General Release 
               EDEN_CANDIDATE_NETWORK    : EdenChain Candidate Release
               EDEN_BETA_NETWORK         : EdenChain Beta Release

            | 

            .. rubric:: (2) Network Settings
               :name: InstallSDK&DevelopmentforPython-(2)NetworkSettings

            It is to initialize API Class, after which all APIs are
            called using the class.

            | 

               EdenClientApi(network_id)

            ::

               parameter  :
                            network_id puts the network constants above.

               return     :
                            A Python class is created. Use this instance to call the API.

            -  .. rubric:: Authentication
                  :name: InstallSDK&DevelopmentforPython-Authentication

            Only sign in to Edenchain is supported. Sign In provides
            sign-in to the pre-created account.

            | 

               authenticate_user( email, password)

            ::

               parameter  :
                            email    (String) :  An email address to use for future accounts.
                            password (String) : An password to use for future accounts.
               return     :
                            token   (String)  :  Returns the authentication token of the user to be used in the API call.

            | 

            -  .. rubric:: Synchronous apis
                  :name: InstallSDK&DevelopmentforPython-Synchronousapis

            Each API has an async version and a default sync version,
            and async has a \_async appended to the function name.

            | 

               get_user_info(token='')

            Returns user information in the Edenchain. Returns the
            dictionary type, token address or token deposit, and
            Ethereum address information to be used for withdrawing.

            | 

            ::

               parameter  :
                            token      ( String ) :  This is the token value obtained at the time of authentication.

               return:
                            {}                    : Returns a Dictionary, with the following information.

                                                  email  ( String ) :  User email address

                                                  eth_address (String ) : It is the ethereum address of the user added / deleted by api, and may contain multiple addresses as delimiter with '|'.

                                                                          It will refuse to withdraw or deposit to unregistered address in API.
                                                   tedn_public_key (String) Eden chain User wallet address

            | 

            | 

               get_user_balance(token='')

            Returns the user account balance of the Eden chain.

            | 

            ::

               parameter  :
                           token    ( String ) :  This is the token value obtained at the time of authentication.
               return: 
                           int                 : decimal is the Token balance of 18

            | 

               get_user_transaction(token='', page = 0, countperpage =
               0)

            It is an API to get the transaction list of the user.
            Returns information from the transaction of the user
            corresponding to iamtoken.

            | 

            ::

               parameter  :
                           token      ( String ) :  This is the token value obtained at the time of authentication.
                           page  (int)           : Specify whether to return the transaction for some pages.
                           countperpage (int)    : By specifying the transaction count of each page and specifying the page, you specify how many transactions are returned.

               return:
                           [{}]                  :   Returns a list of objects, each of which has the following information in dictionary form.
                                                  from_addr  (String):  The address on Edenchain where the amount is withdrawn.
                                                  to_addr       (String) : The address on the Edenchain where the amount is deposited.
                                                  amount     (int )       :  token amount corresponding to tx, and it is decimal 18.
                                                  regdate    (int)         : The time at which tx was performed, in seconds.

            ..

               get_coin_server_address(token='')

            Returns the CoinServer Ethereum Address. It returns the
            address of Ropsten Ethereum Testnet in Beta Release and
            Candidate Release, and returns the address of Ethereum
            MainNet in General Release.

            | 

            ::

               parameter  :
                            token      ( String ) :  This is the token value obtained at the time of authentication.

               return:
                            String            : Returns the Ethereum address of the Coin Server.

            | 

               add_eth_address(token='', private_key='')

            It is used to add Ethereum address in the user account. In
            order to prevent the misuse of the address of the other
            person, the address is signed and sent, and the server
            processes it only when the signature is correct.

            | 

            ::

               parameter  :
                            token      ( String ) :  This is the token value obtained in authentication
                            private_key (String)  : Ethereum Private Key is used to generate the following address object using the corresponding key and forward it to the server side.
                                                    The following is an address Object.
                                                    address  (String) : Ethereum Checksum Address
                                                    public_key (String) : Ethereum public key. This is used to verify the signature.
                                                    signature ( String ) : After the keccak256 hash of address, it is signed with Ethereum private key.

               return    :
                             Boolean   : It indicates the success or failure of Ethereum address addition.

            | 

               del_eth_address( token='', private_key='')

            It is used to put ethereum address in user account. In order
            to prevent the misuse of the address of the other person,
            the address is signed and sent, and the server processes it
            only when the signature is correct.

            | 

            ::

               parameter  :
                           token      ( String ) :  This is the token value obtained in authentication
                           private_key (String)  : Ethereum Private Key is used to generate the following address object using the corresponding key and forward it to the server side.
                                                   The followings are address Objects. 
                                                   address  (String) : Ethereum Checksum Address
                                                   public_key (String) : Ethereum public Key.이며, signature를 verify할 때 사용한다.
                                                   signature ( String ) : address를 keccak256 해시 후 이를 ethereum private key로 sign한 값이다.

               return    :
                          Boolean   : It indicates the success or failure of Ethereum address deletion.

            | 

               deposit_token(token='', txhash='')

            It is the API that is called when the Ethereum ERC20 EDN
            Token is passed for the Edenchain service.

            | 

            ::

               parameter  :
                            token      ( String ) :  This is the token value obtained at the time of authentication.
                            txhash          (String)   : Transaction hash value after ethereum transfer

               return     :
                             Boolean   : Indicates the success or failure of the API.

            | 

               withdraw_token(token='', ethaddress='',amount=0)

            This is the API that is called when the token of the Eden
            Chain service is passed to Ethereum's ERC20 EDN Token.

            | 

            ::

               parameter  :
                            token      ( String ) :  Authentication시 얻어지는 token 값이다.
                            ethaddress   (String ) :  The address on the Ethereum you want to receive, which must be registered by addEthAddress () in advance.
                            amount        (int)        : The amount you want to receive and it is decimal 18.

               return     :
                            txhash  (String): Txhash value generated after Ethereum transfer in Coin Server. You can use that value to determine if the withdraw was successful.

            | 

            -  .. rubric:: Asynchronous apis
                  :name: InstallSDK&DevelopmentforPython-Asynchronousapis

            Each API has an async version and a default sync version,
            and async has a \_async appended to the function name.

            | 

               get_user_info_async(token='')

            And returns user information on the Edenchain. Returns the
            dictionary type, token address or token deposit, and
            Ethereum address information to be used for withdrawing.

            | 

            ::

               parameter  :
                            token      ( String ) :  This is the token value obtained at the time of authentication.

               return:
                            {}                    : Returns a Dictionary, with the following information.

                                                  email  ( String ) :  User email address
                                                  eth_address (String ) : It is the ethereum address of the user added / deleted by api, and may contain multiple addresses as delimiter with '|'.

                                                                          withdraw or deposit of api will refuse to withdraw or deposit to unregistered address.
                                                  tedn_public_key (String )  Edenchain user wallet address

            | 

            | 

               get_user_balance_async(token='')

            Returns the user account Balance on Edenchain.

            | 

            ::

               parameter  :
                           token    ( String ) :  This is the token value obtained in authentication

               return: 
                           int                 : decimal is the Token balance of 18

            | 

               get_user_transaction_async(token='', page = 0,
               countperpage = 0)

            It is an API to get the transaction list of the user.
            Returns information from the transaction of the user
            corresponding to iamtoken.

            | 

            ::

               parameter  :
                           token      ( String ) :  This is the token value obtained in authentication
                           page  (int)           : Specifies the next page transaction to return.
                           countperpage (int)    : By specifying the transaction count of each page and specifying the page, you can specify how many transactions are returned.

               return:
                           [{}]                  :   Returns a list of objects, each of which has the following information in dictionary form.
                                                  from_addr  (String):  The address on the Edenchain where the amount is withdrawn.
                                                  to_addr       (String) : The address on the Edenchain where the amount is deposited.
                                                  amount     (int )       :  token amount corresponding to tx, and it is decimal 18.
                                                  regdate    (int)         : The time at which tx was performed, in seconds.

            ..

               get_coin_server_address_async(token='')

            Returns to the CoinServer Ethereum Address. It returns the
            address of Ropsten Ethereum Testnet in Beta Release and
            Candidate Release, and returns the address of Ethereum
            MainNet in General Release.

            | 

            ::

               parameter  :
                            token      ( String ) :  AThis is the token value obtained at the time of authentication.

               return:
                            String            : Returns the Ethereum address of the Coin Server.

            | 

               add_eth_address_async(token='', private_key='')

            It is used to put Ethereum address in the user account. In
            order to prevent the misuse of the address of the other
            person, the address is signed and sent, and the server
            processes it only when the signature is correct.

            | 

            ::

               parameter  :
                            token      ( String ) :  This is the token value obtained at the time of authentication.
                            private_key (String)  : Ethereum Private Key is used to generate the following address object using the corresponding key and forward it to the server side.
                                                    The followings are address Objects. 
                                                    address  (String) : Ethereum Checksum Address
                                                    public_key (String) : Ethereum public key. This is used to verify the signature.
                                                    signature ( String ) : After the keccak256 hash of address, it is signed with Ethereum private key.

               return    :
                             Boolean   : It indicates the success or failure of Ethereum address addition.

            | 

               del_eth_address_async( token='', private_key='')

            It is used to put Ethereum address in the user account. In
            order to prevent the misuse of the address of the other
            person, the address is signed and sent, and the server
            processes it only when the signature is correct.

            | 

            | 

            ::

               parameter  :
                           token      ( String ) :  This is the token value obtained at the time of authentication.
                           private_key (String)  : Ethereum Private Key is used to generate the following address object using the corresponding key and forward it to the server side.
                                                   The followings are address Objects. 
                                                   address  (String) : Ethereum Checksum Address
                                                   public_key (String) : Ethereum public Key.It is used to verify the signature.
                                                   signature ( String ) : After the keccak256 hash of address, it is a value signed with Ethereum private key.

               return    :
                          Boolean   : It indicates the success or failure of Ethereum address deletion.

            | 

               deposit_token_async(token='', txhash='')

            It is the API that is called when the Ethereum ERC20 EDN
            Token is passed for the Eden Chain service.

            | 

            ::

               parameter  :
                            token      ( String ) :   This is the token value obtained at the time of authentication.
                            txhash          (String)   : Transaction hash value after Ethereum transfer

               return     :
                             Boolean   : Indicates the success or failure of the API.

            | 

               withdraw_token_async(token='', ethaddress='',amount=0)

            This is the API that is called when the token of the Eden
            Chain service is passed to Ethereum's ERC20 EDN Token.

            | 

            ::

               parameter  :
                            token      ( String ) :  This is the token value obtained at the time of authentication.
                            ethaddress   (String ) :  The address on the ethereum you want to receive, which must be registered by addEthAddress () in advance.
                            amount        (int)        : The quantity you want to receive and it is decimal 18..

               return     :
                            txhash  (String): Txhash value generated after Ethereum transfer in Coin Server. You can use that value to determine if the withdraw was successful.

            | 

            | 

            | 

            | 

            --------------

            --------------

            | 

            | 

            #. .. rubric:: 개발 환경
                  :name: InstallSDK&DevelopmentforPython-개발환경

            Linux/Windows/Mac OS 

            python3용으로만 개발되어 있다.

            | 

            .. rubric:: 2. 설치
               :name: InstallSDK&DevelopmentforPython-2.설치

            프로젝트 디렉토리에서 아래와 같이 수행한다.

            | 

            ::

               pip install  eden_client_api

            | 
            | 오류가 없을 경우 관련 library까지 같이 설치가 완료된다.

            .. rubric:: 3. 제공 API
               :name: InstallSDK&DevelopmentforPython-3.제공API

            아래 모든 API는 EdenClientApi() class의 method이다.

            | 

            -  .. rubric:: 네트워크 설정 
                  :name: InstallSDK&DevelopmentforPython-네트워크설정

            SDK를 통해 접속할 에덴체인의 네트워크를 설정한다. 현재 3개의
            네트워크가 있으며 테스트할 네트워크를 설정하게 되는데 SDK를
            사용할 때 언제나 제일 먼저 초기화 해야 하는 작업이다.

            | 

            .. rubric:: (1)  네트워크 상수
               :name: InstallSDK&DevelopmentforPython-(1)네트워크상수

            ::

               EDEN_MAINNET_NETWORK      : EdenChain MainNet General Release 
               EDEN_CANDIDATE_NETWORK    : EdenChain Candidate Release
               EDEN_BETA_NETWORK         : EdenChain Beta Release

            | 

            .. rubric:: (2) 네트워크 설정 
               :name: InstallSDK&DevelopmentforPython-(2)네트워크설정

            API Class 초기화할 때 사용되며, 이 후 모든 API는 해당
            class를 이용하여 호출된다.

            | 

               EdenClientApi(network_id)

            ::

               parameter  :
                            network_id는 위 네트워크 상수를 넣는다.

               return     :
                            Python class가 생성된다. 이 instance를 사용하여 API를 호출한다.

            -  .. rubric:: Authentication
                  :name: InstallSDK&DevelopmentforPython-Authentication.1

            Edenchain으로의 Sign in만을 지원한다. Sign In은 기 생성된
            계정으로의 Sign  In을 제공한다.

            | 

               authenticate_user( email, password)

            ::

               parameter  :
                            email    (String) :  앞으로 사용할 계정으로 사용할 email주소이다.
                            password (String) : 앞으로 사용할 계정의 암호이다.

               return     :
                            token   (String)  :  API호출에 사용될 사용자의 인증 token을 리턴한다.

            | 

            -  .. rubric:: Synchronous apis
                  :name: InstallSDK&DevelopmentforPython-Synchronousapis.1

            각 api는 async버전과 기본 sync버전이 있으며, async의 경우는
            함수 이름 뒤에 \_async가 붙어있는 형태로 되어 있다.

            | 

               get_user_info(token='')

            에덴체인 상의 사용자 정보를 리턴한다.  dictionary형태로
            리턴하며  token address 또는 token deposit, withdraw에
            사용될 ethereum 주소 정보 등을 리턴한다.

            | 

            ::

               parameter  :
                            token      ( String ) :  Authentication시 얻어지는 token 값이다.

               return:
                            {}                    : Dictionary를 리턴하며, 다음 정보를 가진다.

                                                  email  ( String ) :  사용자 email주소

                                                  eth_address (String ) : api에 의해 추가/삭제된 사용자 ethereum주소이며, '|'로 Delimiter로 하여 여러 주소가 들어 있을 수 있다. 

                                                                          api중 withdraw나 deposit은 등록되지 않은 주소로의 withdraw나 deposit은 거부한다.
                                                  tedn_public_key (String )  에덴체인 사용자 Wallet 주소

            | 

            | 

               get_user_balance(token='')

            에덴체인의 사용자 계정 Balance를 리턴한다.

            | 

            ::

               parameter  :
                           token    ( String ) :  Authentication시 얻어지는 token 값이다.

               return: 
                           int                 : decimal 18인 Token balance이다

            | 

               get_user_transaction(token='', page = 0, countperpage =
               0)

            사용자의 Transaction List를 얻는 API이다. iamtoken에
            해당하는 사용자의 Transaction에서 정보를 리턴한다.

            | 

            ::

               parameter  :
                           token      ( String ) :  Authentication시 얻어지는 token 값이다.
                           page  (int)           : 몇번 째 페이지의 transaction을 리턴하는지 지정한다.
                           countperpage (int)    : 각 페이지의 transaction count를 지정해서 , page를 지정하게 되면 몇번째 transaction이 몇개 리턴되는지 지정하게 된다.

               return:
                           [{}]                  :   Object의 리스트를 리턴하며, 각 오브젝트는 딕셔너리 형태로 다음 정보를 가진다.
                                                  from_addr  (String):  amount가 빠져나가는 에덴체인 상의 주소
                                                  to_addr       (String) : amount가 들어가는 에덴체인 상의 주소
                                                  amount     (int )       :  tx에 해당하는 token amount이며, decimal 18이다.
                                                  regdate    (int)         : tx가 수행된 시간이며, 초단위이다.

            ..

               get_coin_server_address(token='')

            CoinServer Ethereum Address를 리턴한다. Beta Release와
            Candidate Release까지는 Ropsten Ethereum Testnet의 주소를
            리턴하며, General Release시에는 Ethereum MainNet상의 주소를
            리턴한다.

            | 

            ::

               parameter  :
                            token      ( String ) :  Authentication시 얻어지는 token 값이다.

               return:
                            String            : Coin Server의 Ethereum 주소를 리턴한다.

            | 

               add_eth_address(token='', private_key='')

            사용자 계정에 ethereum 주소를 넣는데 사용된다. 남의
            address의 도용을 방지하기 위해서 address를 sign하여 보내게
            되어 있으며, sign이 맞을 경우에만 서버에서 처리한다.

            | 

            ::

               parameter  :
                            token      ( String ) :  Authentication시 얻어지는 token 값이다.
                            private_key (String)  : Etheruem Private Key이며, 해당 key를 사용하여 아래 address object를 생성하여 서버쪽에 전달한다.
                                                    다음은 address Object이다. 
                                                    address  (String) : Ethereum Checksum Address
                                                    public_key (String) : Ethereum public Key.이며, signature를 verify할 때 사용한다.
                                                    signature ( String ) : address를 keccak256 해시 후 이를 ethereum private key로 sign한 값이다.

               return    :
                             Boolean   : Ethereum 주소 추가의 성공, 실패여부를 나타낸다.

            | 

               del_eth_address( token='', private_key='')

            사용자 계정에 ethereum 주소를 넣는데 사용된다. 남의
            address의 도용을 방지하기 위해서 address를 sign하여 보내게
            되어 있으며, sign이 맞을 경우에만 서버에서 처리한다.

            | 

            ::

               parameter  :
                           token      ( String ) :  Authentication시 얻어지는 token 값이다.
                           private_key (String)  : Etheruem Private Key이며, 해당 key를 사용하여 아래 address object를 생성하여 서버쪽에 전달한다.
                                                   다음은 address Object이다. 
                                                   address  (String) : Ethereum Checksum Address
                                                   public_key (String) : Ethereum public Key.이며, signature를 verify할 때 사용한다.
                                                   signature ( String ) : address를 keccak256 해시 후 이를 ethereum private key로 sign한 값이다.

               return    :
                          Boolean   : Ethereum 주소 삭제의 성공, 실패여부를 나타낸다.

            | 

               deposit_token(token='', txhash='')

            Ethereum의 ERC20 EDN Token을 에덴체인 서비스를 위해 넘기는
            경우 호출되는 API이다.

            | 

            ::

               parameter  :
                            token      ( String ) :  Authentication시 얻어지는 token 값이다.
                            txhash          (String)   : Ethereum transfer후의 transaction hash값

               return     :
                             Boolean   : API의 성공, 실패여부를 나타낸다.

            | 

               withdraw_token(token='', ethaddress='',amount=0)

            에덴체인 서비스의 token을 Ethereum의 ERC20 EDN Token으로
            넘기는 경우 호출되는 API이다.

            | 

            ::

               parameter  :
                            token      ( String ) :  Authentication시 얻어지는 token 값이다.
                            ethaddress   (String ) :  받고자 하는 ethereum상의 주소이며, 이는 미리 addEthAddress()에 의해 등록되어 있어야 한다.
                            amount        (int)        : 받고자 하는 양이며, decimal 18이다.

               return     :
                            txhash  (String): Coin Server에서 Ethereum Transfer후 발생된 txhash값. 해당 값을 사용하여 withdraw가 성공했는지 알 수 있다.

            | 

            -  .. rubric:: Asynchronous apis
                  :name: InstallSDK&DevelopmentforPython-Asynchronousapis.1

            각 api는 async버전과 기본 sync버전이 있으며, async의 경우는
            함수 이름 뒤에 \_async가 붙어있는 형태로 되어 있다.

            | 

               get_user_info_async(token='')

            에덴체인 상의 사용자 정보를 리턴한다.  dictionary형태로
            리턴하며  token address 또는 token deposit, withdraw에
            사용될 ethereum 주소 정보 등을 리턴한다.

            | 

            ::

               parameter  :
                            token      ( String ) :  Authentication시 얻어지는 token 값이다.

               return:
                            {}                    : Dictionary를 리턴하며, 다음 정보를 가진다.

                                                  email  ( String ) :  사용자 email주소

                                                  eth_address (String ) : api에 의해 추가/삭제된 사용자 ethereum주소이며, '|'로 Delimiter로 하여 여러 주소가 들어 있을 수 있다. 

                                                                          api중 withdraw나 deposit은 등록되지 않은 주소로의 withdraw나 deposit은 거부한다.
                                                  tedn_public_key (String )  에덴체인 사용자 Wallet 주소

            | 

            | 

               get_user_balance_async(token='')

            에덴체인의 사용자 계정 Balance를 리턴한다.

            | 

            ::

               parameter  :
                           token    ( String ) :  Authentication시 얻어지는 token 값이다.

               return: 
                           int                 : decimal 18인 Token balance이다

            | 

               get_user_transaction_async(token='', page = 0,
               countperpage = 0)

            사용자의 Transaction List를 얻는 API이다. iamtoken에
            해당하는 사용자의 Transaction에서 정보를 리턴한다.

            | 

            ::

               parameter  :
                           token      ( String ) :  Authentication시 얻어지는 token 값이다.
                           page  (int)           : 몇번 째 페이지의 transaction을 리턴하는지 지정한다.
                           countperpage (int)    : 각 페이지의 transaction count를 지정해서 , page를 지정하게 되면 몇번째 transaction이 몇개 리턴되는지 지정하게 된다.

               return:
                           [{}]                  :   Object의 리스트를 리턴하며, 각 오브젝트는 딕셔너리 형태로 다음 정보를 가진다.
                                                  from_addr  (String):  amount가 빠져나가는 에덴체인 상의 주소
                                                  to_addr       (String) : amount가 들어가는 에덴체인 상의 주소
                                                  amount     (int )       :  tx에 해당하는 token amount이며, decimal 18이다.
                                                  regdate    (int)         : tx가 수행된 시간이며, 초단위이다.

            ..

               get_coin_server_address_async(token='')

            CoinServer Ethereum Address를 리턴한다. Beta Release와
            Candidate Release까지는 Ropsten Ethereum Testnet의 주소를
            리턴하며, General Release시에는 Ethereum MainNet상의 주소를
            리턴한다.

            | 

            ::

               parameter  :
                            token      ( String ) :  Authentication시 얻어지는 token 값이다.

               return:
                            String            : Coin Server의 Ethereum 주소를 리턴한다.

            | 

               add_eth_address_async(token='', private_key='')

            사용자 계정에 ethereum 주소를 넣는데 사용된다. 남의
            address의 도용을 방지하기 위해서 address를 sign하여 보내게
            되어 있으며, sign이 맞을 경우에만 서버에서 처리한다.

            | 

            ::

               parameter  :
                            token      ( String ) :  Authentication시 얻어지는 token 값이다.
                            private_key (String)  : Etheruem Private Key이며, 해당 key를 사용하여 아래 address object를 생성하여 서버쪽에 전달한다.
                                                    다음은 address Object이다. 
                                                    address  (String) : Ethereum Checksum Address
                                                    public_key (String) : Ethereum public Key.이며, signature를 verify할 때 사용한다.
                                                    signature ( String ) : address를 keccak256 해시 후 이를 ethereum private key로 sign한 값이다.

               return    :
                             Boolean   : Ethereum 주소 추가의 성공, 실패여부를 나타낸다.

            | 

               del_eth_address_async( token='', private_key='')

            사용자 계정에 ethereum 주소를 넣는데 사용된다. 남의
            address의 도용을 방지하기 위해서 address를 sign하여 보내게
            되어 있으며, sign이 맞을 경우에만 서버에서 처리한다.

            | 

            ::

               parameter  :
                           token      ( String ) :  Authentication시 얻어지는 token 값이다.
                           private_key (String)  : Etheruem Private Key이며, 해당 key를 사용하여 아래 address object를 생성하여 서버쪽에 전달한다.
                                                   다음은 address Object이다. 
                                                   address  (String) : Ethereum Checksum Address
                                                   public_key (String) : Ethereum public Key.이며, signature를 verify할 때 사용한다.
                                                   signature ( String ) : address를 keccak256 해시 후 이를 ethereum private key로 sign한 값이다.

               return    :
                          Boolean   : Ethereum 주소 삭제의 성공, 실패여부를 나타낸다.

            | 

               deposit_token_async(token='', txhash='')

            Ethereum의 ERC20 EDN Token을 에덴체인 서비스를 위해 넘기는
            경우 호출되는 API이다.

            | 

            ::

               parameter  :
                            token      ( String ) :  Authentication시 얻어지는 token 값이다.
                            txhash          (String)   : Ethereum transfer후의 transaction hash값

               return     :
                             Boolean   : API의 성공, 실패여부를 나타낸다.

            | 

               withdraw_token_async(token='', ethaddress='',amount=0)

            에덴체인 서비스의 token을 Ethereum의 ERC20 EDN Token으로
            넘기는 경우 호출되는 API이다.

            | 

            ::

               parameter  :
                            token      ( String ) :  Authentication시 얻어지는 token 값이다.
                            ethaddress   (String ) :  받고자 하는 ethereum상의 주소이며, 이는 미리 addEthAddress()에 의해 등록되어 있어야 한다.
                            amount        (int)        : 받고자 하는 양이며, decimal 18이다.

               return     :
                            txhash  (String): Coin Server에서 Ethereum Transfer후 발생된 txhash값. 해당 값을 사용하여 withdraw가 성공했는지 알 수 있다.

            | 

   .. container::
      :name: footer

      .. container:: section footer-body

         Document generated by Confluence on Mar 27, 2019 18:40

         .. container::
            :name: footer-logo

            `Atlassian <http://www.atlassian.com/>`__

